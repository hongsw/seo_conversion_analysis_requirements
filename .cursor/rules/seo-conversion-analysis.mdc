---
alwaysApply: true
---
# SEO 및 전환율 분석 프로젝트 규칙

이 문서는 `seo_conversion_analysis_requirements.md`와 `seo_conversion_opensource.md`의 내용을 바탕으로 우리 프로젝트의 개발 규칙, 표준, 워크플로우를 정의합니다.

## 1. 프로젝트 목표

- **목적**: 콘텐츠 페이지의 SEO 성과를 분석하고, 구매 페이지로의 전환율을 측정하여 데이터 기반의 콘텐츠 전략을 수립합니다.
- **핵심 기능**: 트래픽 분석, 전환율 분석, SEO 성과 추적, 데이터 시각화 대시보드 및 자동화 리포트.

## 2. 핵심 기술 스택

- **프론트엔드**: React, Chart.js (또는 D3.js/Plotly)
- **백엔드**: Python, Django (또는 Flask)
- **데이터 처리**: Python (Pandas, NumPy)
- **데이터베이스**: PostgreSQL (운영), SQLite (개발)
- **버전 관리**: Git
- **배포**: Docker

## 3. 프로젝트 구조

프로젝트는 다음 디렉토리 구조를 따릅니다. 새로운 파일이나 모듈 추가 시 이 구조를 유지해야 합니다.

```
seo-content-conversion-analytics/
├── 📂 backend/
│   ├── 📂 app/
│   │   ├── 📂 models/          # 데이터 모델 (ORM)
│   │   ├── 📂 services/        # 비즈니스 로직
│   │   ├── 📂 analytics/       # 분석 엔진
│   │   └── 📂 api/            # REST API 엔드포인트
│   ├── 📂 collectors/          # 외부 데이터 수집기
│   ├── 📂 processors/          # 데이터 가공 및 처리
│   └── 📂 utils/              # 백엔드 유틸리티
├── 📂 frontend/
│   ├── 📂 src/
│   │   ├── 📂 components/      # 재사용 가능한 React 컴포넌트
│   │   ├── 📂 pages/          # 페이지 단위 컴포넌트
│   │   ├── 📂 hooks/          # 커스텀 React 훅
│   │   └── 📂 utils/          # 프론트엔드 유틸리티
│   └── package.json
├── 📂 data/
│   ├── 📂 raw/               # 가공 전 원본 데이터
│   ├── 📂 processed/         # 처리된 데이터
│   └── 📂 exports/           # 리포트 등 내보내기용 데이터
├── 📂 docs/
│   ├── 📂 api/               # API 명세서
│   ├── 📂 user-guide/        # 사용자 매뉴얼
│   └── 📂 development/       # 개발 가이드
├── 📂 tests/
│   ├── 📂 unit/              # 단위 테스트
│   ├── 📂 integration/       # 통합 테스트
│   └── 📂 e2e/              # End-to-End 테스트
├── 📂 config/
│   ├── settings.py          # 프로젝트 설정
│   └── database.py          # 데이터베이스 설정
├── requirements.txt         # Python 의존성
├── Dockerfile              # Docker 설정
└── .env.example           # 환경 변수 템플릿
```

## 4. 개발 워크플로우

### 4.1. Git 브랜치 전략
- `main` 브랜치는 항상 배포 가능한 상태를 유지합니다.
- 기능 개발, 버그 수정 등 모든 작업은 별도의 브랜치에서 진행합니다.
- 브랜치 이름은 `feature/기능-이름`, `fix/버그-이름` 형식을 따릅니다.
- 작업이 완료되면 `main` 브랜치로 Pull Request(PR)를 생성합니다.

### 4.2. 커밋 규칙
- 작업 단위별로 가능한 한 작게 나누어 커밋합니다. [[memory:2654976]]
- 커밋 메시지는 변경 내용을 명확하게 설명합니다.

### 4.3. 코드 리뷰
- 모든 Pull Request는 동료 리뷰를 거친 후 Merge하는 것을 원칙으로 합니다.
- 리뷰어는 코드 스타일, 로직, 테스트 커버리지 등을 확인합니다.

## 5. 코딩 표준 및 품질 관리

### 5.1. Python (백엔드)
- **포맷팅**: `black`을 사용하여 코드 스타일을 통일합니다.
- **린팅**: `flake8`을 사용하여 잠재적인 오류나 코드 스타일 위반을 검사합니다.
- **타입 체크**: `mypy`를 사용하여 정적 타입 검사를 수행합니다.

### 5.2. JavaScript/React (프론트엔드)
- **포맷팅**: `Prettier`를 사용하여 코드 스타일을 통일합니다.
- **린팅**: `ESLint`를 사용하여 코드 품질을 관리합니다.

### 5.3. 테스트
- 새로운 기능 추가 및 버그 수정 시 반드시 관련 테스트 코드를 작성하거나 업데이트합니다.
- **백엔드 테스트**: `pytest`를 사용하여 `tests/` 디렉토리 내에 테스트 코드를 작성합니다.
- **프론트엔드 테스트**: `npm test` 명령어를 통해 테스트를 실행합니다. [[memory:2410034]]

## 6. 데이터 및 문서 관리

### 6.1. 데이터
- 민감한 정보(API 키, 비밀번호 등)는 `.env` 파일에서 관리하며, Git 저장소에 포함하지 않습니다. `.env.example` 파일을 통해 필요한 환경 변수 목록을 제공합니다.
- 데이터는 `data/` 디렉토리의 목적에 맞게 `raw`, `processed`, `exports`로 분류하여 저장합니다.

### 6.2. 문서
- **API**: 새로운 API를 추가하거나 변경할 경우 `docs/api/`에 관련 문서를 업데이트합니다.
- **사용자 가이드**: 최종 사용자가 참고할 기능 변경 사항은 `docs/user-guide/`에 반영합니다.

## 7. 핵심 분석 지표

개발 및 분석 시 다음 핵심 지표를 항상 고려해야 합니다.

- **트래픽 지표**: 페이지뷰(PV), 세션 수, 평균 세션 지속 시간, 이탈률
- **SEO 지표**: 유기적 검색 트래픽, 검색 순위, 클릭률(CTR)
- **전환 지표**: 전환율, 전환 가치, 전환 경로, 전환 시간
description:
globs:
alwaysApply: false
---
